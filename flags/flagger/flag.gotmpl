package flags

{{ if .Imports -}}import ({{ range .Imports }}
    "{{ . }}"{{ end }}
)

{{ end -}}
type {{ .Name }}Flag struct {
    *baseFlag

	defValue {{ .Type }}
	value    {{ .Type }}
}

func (f *{{ .Name }}Flag) Type() FlagType { return {{ pascal .Name }}FlagType }

func (f *{{ .Name }}Flag) Value() any {
    if f.IsSet() {
        return f.value
    }
    return f.defValue
}

func (f *{{ .Name }}Flag) Set(s string) error {
    {{- if .ParseFunc }}
    v, err := {{ .ParseFunc }}
    if err != nil {
        return err
    }
    f.value = {{ .Type }}(v)
    {{ else }}
    f.value = s
    {{ end -}}
    f.set = true
    return nil
}

func {{ pascal .Name }}Flag(name string, value {{ .Type }}, usage string) Flag {
    return &{{ .Name }}Flag{
        baseFlag: &baseFlag{name: name, usage: usage},
        defValue: value,
    }
}

func {{ pascal .Name }}FlagS(name string, shorthand rune, value {{ .Type }}, usage string) Flag {
    return &{{ .Name }}Flag{
        baseFlag: &baseFlag{name: name, short: shorthand, usage: usage},
        defValue: value,
    }
}

func (fs *FlagSet) {{ pascal .Name }}(name string, value {{ .Type }}, usage string) {
    fs.addFlag({{ pascal .Name }}Flag(name, value, usage))
}

func (fs *FlagSet) {{ pascal .Name }}S(name string, shorthand rune, value {{ .Type }}, usage string) {
    fs.addFlag({{ pascal .Name }}FlagS(name, shorthand, value, usage))
}

func (fs *FlagSet) {{ .Name }}Val(name string) ({{ .Type }}, error) {
    f, err := fs.flag(name, {{ pascal .Name }}FlagType)
    if err != nil {
        return {{ .Default }}, err
    }
    return f.Value().({{ .Type }}), nil
}

func (g FlagGetter) Lookup{{ pascal .Name }}(name string) ({{ .Type }}, error) {
    return g.fs.{{ .Name }}Val(name)
}

func (g FlagGetter) {{ pascal .Name }}(name string) {{ .Type }} {
    v, _ := g.Lookup{{ pascal .Name }}(name)
    return v
}
